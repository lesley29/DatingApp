// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatingAppDbContext))]
    [Migration("20201206093144_AddMessage")]
    partial class AddMessage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Domain.Aggregates.Users.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Instant?>("ReadDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("read_date");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("recipient_deleted");

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer")
                        .HasColumnName("recipient_id");

                    b.Property<Instant>("SendDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("send_date");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("sender_deleted");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.HasKey("Id")
                        .HasName("pk_message");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_message_recipient_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_message_sender_id");

                    b.ToTable("message");
                });

            modelBuilder.Entity("Domain.Aggregates.Users.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("BriefDescription")
                        .HasColumnType("text")
                        .HasColumnName("brief_description");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<LocalDate>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("Interests")
                        .HasColumnType("text")
                        .HasColumnName("interests");

                    b.Property<Instant>("LastActive")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_active");

                    b.Property<string>("LookingFor")
                        .HasColumnType("text")
                        .HasColumnName("looking_for");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Domain.Aggregates.Users.Entities.Message", b =>
                {
                    b.HasOne("Domain.Aggregates.Users.Entities.User", "Recipient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("fk_message_users_recipient_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Users.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("fk_message_users_sender_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Aggregates.Users.Entities.User", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Users.ValueObjects.UserLike", "UserLikes", b1 =>
                        {
                            b1.Property<int>("SourceUserId")
                                .HasColumnType("integer")
                                .HasColumnName("source_user_id");

                            b1.Property<int>("TargetUserId")
                                .HasColumnType("integer")
                                .HasColumnName("target_user_id");

                            b1.HasKey("SourceUserId", "TargetUserId")
                                .HasName("pk_user_like");

                            b1.HasIndex("TargetUserId")
                                .HasDatabaseName("ix_user_like_target_user_id");

                            b1.ToTable("user_like");

                            b1.WithOwner("SourceUser")
                                .HasForeignKey("SourceUserId")
                                .HasConstraintName("fk_user_like_users_source_user_id1");

                            b1.HasOne("Domain.Aggregates.Users.Entities.User", null)
                                .WithMany()
                                .HasForeignKey("TargetUserId")
                                .HasConstraintName("fk_user_like_user_user_id")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("SourceUser");
                        });

                    b.OwnsOne("Domain.Aggregates.Users.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("password_hash");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("password_salt");

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_password_user_user_id");
                        });

                    b.OwnsMany("Domain.Aggregates.Users.ValueObjects.Photo", "Photos", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer")
                                .HasColumnName("user_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<bool>("IsMain")
                                .HasColumnType("boolean")
                                .HasColumnName("is_main");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.HasKey("UserId", "Id")
                                .HasName("pk_photo");

                            b1.ToTable("photo");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_photo_users_user_id");
                        });

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Photos");

                    b.Navigation("UserLikes");
                });

            modelBuilder.Entity("Domain.Aggregates.Users.Entities.User", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
